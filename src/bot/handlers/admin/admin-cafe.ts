import { InlineKeyboard } from "grammy";
import { AppContext } from "../../../interfaces";
import { AppDataSource } from "../../../services/database";
import { City } from "../../../entities/city";
import { User } from "../../../entities/user";
import { Cafe } from "../../../entities/cafe";

export async function handleAddCafe(ctx: AppContext) {
  const cityRepo = AppDataSource.getRepository(City);
  const userRepo = AppDataSource.getRepository(User);
  const cafeRepo = AppDataSource.getRepository(Cafe);

  if (!ctx.session.cafeData) {
    ctx.session.cafeData = {};
  }
  const cafeData = ctx.session.cafeData;

  // –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ
  if (!cafeData.name) {
    if (!ctx.message.text) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ñ–µ:");
      return;
    }
    cafeData.name = ctx.message.text;
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ñ–µ:");
    return;
  }

  // –®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ
  if (!cafeData.description) {
    if (!ctx.message.text) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ñ–µ:");
      return;
    }
    cafeData.description = ctx.message.text;
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –∫–∞—Ñ–µ:");
    return;
  }

  // –®–∞–≥ 3: –§–æ—Ç–æ (–∞–≤–∞—Ç–∞—Ä)
  if (!cafeData.avatar) {
    if (!ctx.message.photo) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –∫–∞—Ñ–µ:");
      return;
    }
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    cafeData.avatar = photo.file_id;
    await ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–∞—Ñ–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ - —É–ª. –î–∞—Ö–∞–¥–∞–µ–≤–∞, 100–ê):"
    );
    return;
  }

  // –®–∞–≥ 4: –ê–¥—Ä–µ—Å
  if (!cafeData.address) {
    if (!ctx.message.text) {
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–∞—Ñ–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ ;):"
      );
      return;
    }
    cafeData.address = ctx.message.text.split(";").map((s) => s.trim());

    await ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ñ–µ (—á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)"
    );
  }

  if (!cafeData?.owner?.tgId) {
    if (!ctx.message.text) {
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ñ–µ (—á–∏—Å–ª–æ):");
      return;
    }

    const tgId = parseInt(ctx.message.text);
    if (isNaN(tgId) || typeof tgId !== "number") {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ):");
      return;
    }

    // –®–∞–≥ 5: –í–ª–∞–¥–µ–ª–µ—Ü (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (tgId !== 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const owner = await userRepo.findOneBy({ tgId });
      if (!owner) {
        await ctx.reply(
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:"
        );
        return;
      }
      cafeData.owner = owner; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    } else {
      cafeData.owner = null;
    }

    // –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    const cities = await cityRepo.find();
    if (cities.length === 0) {
      await ctx.reply("–ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥.");
      ctx.session.cafeData = undefined;
      return;
    }
    const keyboard = new InlineKeyboard();
    cities.forEach((city) => {
      keyboard.text(city.name, `add_cafe_city_${city.id}`).row();
    });
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∫–∞—Ñ–µ:", { reply_markup: keyboard });
    return;
  }

  // –®–∞–≥ 6: –ì–æ—Ä–æ–¥ (–≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ callbackQuery)
  if (!cafeData.city) {
    await ctx.reply(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∫–∞—Ñ–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ."
    );
    return;
  }

  // –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ñ–µ
  const cafe = cafeRepo.create({
    name: cafeData.name,
    description: cafeData.description,
    avatar: cafeData.avatar,
    address: cafeData.address,
    city: await cityRepo.findOneBy({ id: cafeData.city.id }),
    owner: await userRepo.findOneBy({ tgId: cafeData.owner.tgId }), // –ù–∞—Ö–æ–¥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ tgId
  });
  await cafeRepo.save(cafe);
  ctx.session.cafeData = undefined;
  await ctx.reply(`‚úÖ –ö–∞—Ñ–µ "${cafe.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!`);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ñ–µ
export async function handleEditCafe(ctx: AppContext) {
  if (!ctx.session.adminEditingCafeId) return;

  const cafeRepo = AppDataSource.getRepository(Cafe);
  const userRepo = AppDataSource.getRepository(User);
  const cafe = await cafeRepo.findOne({
    where: { id: ctx.session.adminEditingCafeId },
    relations: ["city", "owner"],
  });

  if (!cafe) return;

  const action = ctx.session.adminAction;

  if (action === "edit_cafe_name" && ctx.message.text) {
    cafe.name = ctx.message.text;
  } else if (action === "edit_cafe_description" && ctx.message.text) {
    cafe.description = ctx.message.text;
  } else if (action === "edit_cafe_avatar" && ctx.message.photo) {
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    cafe.avatar = photo.file_id;
  } else if (action === "edit_cafe_address" && ctx.message.text) {
    cafe.address = ctx.message.text.split(",").map((s) => s.trim());
  } else if (action === "edit_cafe_owner" && ctx.message.text) {
    const tgId = parseInt(ctx.message.text);
    if (isNaN(tgId)) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ):");
      return;
    }

    const owner = await userRepo.findOneBy({ tgId });
    if (!owner) {
      await ctx.reply(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:"
      );
      return;
    }
    cafe.owner = owner;
  } else {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
    return;
  }

  await cafeRepo.save(cafe);
  ctx.session.adminAction = undefined;
  ctx.session.adminEditingCafeId = undefined;

  const keyboard = new InlineKeyboard()
    .text("‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", `edit_cafe_${cafe.id}`)
    .row()
    .text("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "admin_cafes_back");

  await ctx.reply(`‚úÖ –ö–∞—Ñ–µ "${cafe.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`, {
    reply_markup: keyboard,
  });
}
