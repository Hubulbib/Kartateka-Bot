import { Bot, InlineKeyboard, Keyboard } from "grammy";
import { AdminAction, AppContext } from "../../../interfaces";
import { AppDataSource } from "../../../services/database";
import { City } from "../../../entities/city";
import { isAdmin } from "../../bot";

export const setupCityAdmin = (bot: Bot<AppContext>) => {
  bot.hears("üèôÔ∏è –ì–æ—Ä–æ–¥", async (ctx) => {
    if (!isAdmin(ctx)) return;
    const keyboard = new Keyboard()
      .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
      .row()
      .text("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥")
      .row()
      .text("üîô –ù–∞–∑–∞–¥")
      .resized();
    await ctx.reply("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏:", { reply_markup: keyboard });
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
  bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", async (ctx) => {
    if (!isAdmin(ctx)) return;

    ctx.session.adminAction = "add_city";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:");
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
  bot.hears("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥", async (ctx) => {
    if (!isAdmin(ctx)) return;

    const cityRepo = AppDataSource.getRepository(City);
    const cities = await cityRepo.find({
      relations: { cafe: true, users: true },
    });

    const message = "üèô –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:\n\n";

    const backKeyboard = new Keyboard().text("üîô –ù–∞–∑–∞–¥").resized();

    await ctx.reply(message, {
      reply_markup: backKeyboard,
    });

    await Promise.all(
      cities.map(async (city) => {
        const keyboard = new InlineKeyboard()
          .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", `edit_city_${city.id}`)
          .text("üóë –£–¥–∞–ª–∏—Ç—å", `delete_city_${city.id}`);

        const message = `${city.name} (–∫–∞—Ñ–µ: ${city.cafe.length}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${city.users.length})\n`;

        await ctx.reply(message, {
          reply_markup: keyboard,
        });
      })
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
  bot.callbackQuery(/^edit_city_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const cityId = parseInt(ctx.match[1]);
    const cityRepo = AppDataSource.getRepository(City);
    const city = await cityRepo.findOneBy({ id: cityId });

    if (city) {
      ctx.session.adminAction = "edit_city";
      ctx.session.adminEditingCityId = cityId;

      await ctx.editMessageText(
        `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ "${city.name}"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
  bot.callbackQuery(/^delete_city_(\d+)$/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();

    const cityId = parseInt(ctx.match[1]);
    const cityRepo = AppDataSource.getRepository(City);
    const city = await cityRepo.findOne({
      where: { id: cityId },
      relations: { cafe: true, users: true },
    });

    if (city) {
      if (city.cafe.length > 0 || city.users.length > 0) {
        await ctx.editMessageText(
          `‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ "${city.name}"\n` +
            `–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n` +
            `- –ö–∞—Ñ–µ: ${city.cafe.length}\n` +
            `- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${city.users.length}`,
          {
            reply_markup: new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥", "admin_cities"),
          }
        );
        return;
      }

      await cityRepo.delete(cityId);
      await ctx.reply(`‚úÖ –ì–æ—Ä–æ–¥ "${city.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
    }
  });

  bot.callbackQuery("admin_city_back", async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCallbackQuery();
    const keyboard = new Keyboard()
      .text("üè¢ –ö–∞—Ñ–µ")
      .row()
      .text("üèôÔ∏è –ì–æ—Ä–æ–¥")
      .row()
      .text("üìù –û—Ç–∑—ã–≤")
      .row()
      .text("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
      .row()
      .text("‚óÄÔ∏è –ù–∞–∑–∞–¥")
      .resized();
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", {
      reply_markup: keyboard,
    });
  });
};
